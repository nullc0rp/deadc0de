<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reverse-Engineering on deadc0de</title>
    <link>https://deadc.de/tags/reverse-engineering/</link>
    <description>Recent content in Reverse-Engineering on deadc0de</description>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://deadc.de/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Complete Technical Analysis: Reverse Engineering the Logitech F710 Wireless Gamepad - When Your Controller Becomes an Open Book</title>
      <link>https://deadc.de/posts/joystick-f710/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://deadc.de/posts/joystick-f710/</guid>
      <description>&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;TL;DR: Your wireless gamepad is basically shouting your button presses to anyone with a $20 radio module. We built a complete attack framework using Arduino + nRF24L01 that can sniff, replay, and inject controller commands. Spoiler alert: there&amp;rsquo;s no encryption, no authentication, and apparently no one at Logitech thought &amp;ldquo;maybe we should secure this thing.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This comprehensive technical analysis documents our complete reverse engineering journey of the Logitech F710 wireless gamepad, from initial USB analysis through wireless protocol dissection, to developing a working proof-of-concept that demonstrates critical security vulnerabilities.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
